#+BEGIN_QUOTE
古人学问无遗力，少壮工夫老始成。
纸上得来终觉浅，绝知此事要躬行。
#+END_QUOTE

最近又看了一遍 [[https://doc.rust-lang.org/book/][TRPL]] ，但在实际项目开发里，对于一些基础的 *Rust* 特性还是感觉十分难以处理，大抵是实践太少，对于 *Rust* 过于陌生了。正值放假，由于处理了手上的疣无法做太多别的事情，决定乘这段时间过一下 [[https://doc.rust-lang.org/rust-by-example/][Rust by Example]] ，将一些值得记录的东西收集到这里，代码将整理到 [[https://github.com/vhtq18w/rbe_tests][rbe_tests]] 。

* Table of Contents :TOC@4@gh:
- [[#hello-world][Hello World]]
  - [[#comments][Comments]]
  - [[#formatted-print][Formatted print]]
    - [[#debug][Debug]]
    - [[#display][Display]]
      - [[#testcase-list][Testcase: List]]
    - [[#formating][Formating]]
- [[#primitives][Primitives]]
  - [[#literals-and-operators][Literals and operators]]
  - [[#tuples][Tuples]]
  - [[#arrays-and-slices][Arrays and Slices]]
- [[#custom-types][Custom types]]
  - [[#structures][Structures]]
  - [[#enums][Enums]]
    - [[#use][use]]
    - [[#c-like][C-like]]
    - [[#testcase-linked-list][Testcase: linked-list]]
  - [[#constants][constants]]
- [[#variable-bindings][Variable Bindings]]
  - [[#mutability][Mutability]]
  - [[#scope-and-shadowing][Scope and Shadowing]]
  - [[#declare-first][Declare first]]
- [[#types][Types]]
  - [[#casting][Casting]]
  - [[#literals][Literals]]
  - [[#inference][Inference]]
  - [[#aliasing][Aliasing]]
- [[#conversion][Conversion]]
  - [[#from-and-into][~From~ and ~Into~]]
  - [[#tryfrom-and-tryinto][~TryFrom~ and ~TryInto~]]
  - [[#to-and-from-strings][To and From Strings]]
- [[#expressions][Expressions]]
- [[#flow-of-control][Flow of Control]]
  - [[#ifelse][if/else]]
  - [[#loop][loop]]
    - [[#nesting-and-labels][Nesting and labels]]
    - [[#returning-from-loops][Returning from loops]]
  - [[#while][while]]
  - [[#for-and-range][for and range]]
  - [[#match][match]]
    - [[#destructing][Destructing]]
      - [[#tuples-1][tuples]]
      - [[#enums-1][enums]]
      - [[#pointersref][pointers/ref]]
      - [[#structs][structs]]
    - [[#guards][Guards]]
    - [[#bindings][Bindings]]
  - [[#if-let][if let]]
  - [[#while-let][while let]]
- [[#functions][Functions]]
  - [[#methods][Methods]]
  - [[#closures][Closures]]
    - [[#capturing][Capturing]]

* Hello World
*Rust* 可以使用 ~println!~ 宏打印内容到标准输出，格式控制遵守 ~format!~ 宏。

编译 *Rust* 程序只需要简单的执行 ~rustc target.rs~ 。

Hello World test:
#+BEGIN_SRC rust
println!("Hello World!");
#+END_SRC

#+RESULTS:
: Hello World!

*Tips*
在编写 Hello World 的测试用例时，我注意到 ~println!~ 的返回值是 ~unit~ 类型，之前一直以为是 ~None~ 之类的（=。=）

** Comments
*Rust* 支持多种注释风格：
- 标准注释
  - 行内注释
  - 块注释
- 文档注释
  - ~///~
  - ~//!~

** Formatted print
~std::fmt~ 提供了许多控制输出格式的宏与控制文本显示的 /trait/ ，其中两个最为基本的是 ~fmt::Debug~ 和 ~fmt::Display~ ，分别用于调试和用户的显示输出。

*Tips*
- 实现 ~std::fmt::Display~ /trait/ 会自动实现 ~ToString~ /trait/ 用于将类型强制转换为 ~String~ 。

*** Debug
所有使用 ~std::fmt~ 特征的类型都必须可以打印其实现，只有标准库提供的类型完成了自动实现，其他类型都必须手动实现。

使用 ~{:?}~ 格式控制符打印类型的实现。

*** Display
~fmt::Display~ 可读性更好， 使用 ~{}~ 控制符来控制。

*Activity*
定义一个复数类型，实现 ~Display~ /trait/ 。

#+BEGIN_SRC rust
use std::fmt;

#[derive(Debug)]
struct Complex {
    real: f32,
    imag: f32,
}

impl fmt::Display for Complex {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{} + {}i", self.real, self.imag)
    }
}

let complex = Complex { real: 3.3, imag: 7.2 };
println!("{}", complex);
#+END_SRC

#+RESULTS:
: 3.3 + 7.2i

**** Testcase: List
当使用 ~write!~ 去实现 ~Display~ /trait/ 时，处理 ~write!~ 宏产生的 ~fmt::Result~ 的类型返回值会显得有些麻烦，可以使用 ~?~ 操作符在 ~write!~ 宏返回结果未出错的时候自动继续执行。

*Activity*
实现一个 List 的 ~Display~ /trait/ ，同时输出打印列表元素的索引和内容。

#+BEGIN_SRC rust
use std::fmt;

#[derive(Debug)]
struct List(Vec<i32>);

impl fmt::Display for List {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let vec = &self.0;
        write!(f, "[")?;
        for (index, elem) in vec.iter().enumerate() {
            if index != 0 {
                write!(f, ", ")?;
            }
            write!(f, "{}: {}", index, elem)?;
        }
        write!(f, "]")
    }
}

let l = List(vec![1, 2, 3]);
println!("{}", l);
#+END_SRC

#+RESULTS:
: [0: 1, 1: 2, 2: 3]

*** Formating
通过格式控制可以实现不同类型数据的 ~Display~ /trait/ 。

*Activity*
实现一个 Color 类型的 Display trait ，打印 RGB 的 16 进制值。

#+BEGIN_SRC rust
use std::fmt;

#[derive(Debug)]
struct Color {
    red: u8,
    green: u8,
    blue: u8,
}

impl Color {
    fn color_list(&self) -> Vec<u8> {
        vec![self.red, self.green, self.blue]
    }
}

impl fmt::Display for Color {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RGB ({}, {}, {}) 0x", self.red, self.green, self.blue)?;
        let l = self.color_list();
        for elem in l {
            write!(f, "{:02X}", elem)?;
        }
        write!(f, "")
    }
}

for color in [
    Color { red: 128, green: 255, blue: 90 },
    Color { red: 0, green: 3, blue: 254 },
    Color { red: 0, green: 0, blue: 0 },
].iter() {
    println!("{}", *color);
}
#+END_SRC

#+RESULTS:
: RGB (128, 255, 90) 0x80FF5A
: RGB (0, 3, 254) 0x0003FE
: RGB (0, 0, 0) 0x000000

* Primitives
*Rust* 提供了丰富的基础类型，可见 [[https://doc.rust-lang.org/book/ch03-02-data-types.html][Data Types]] 。

** Literals and operators
文字和操作符与其他现代语言无异。

#+BEGIN_SRC rust
println!("1 + 2 = {}", 1u32 + 2);

// Integer subtraction
println!("1 - 2 = {}", 1i32 - 2);
// TODO ^ Try changing `1i32` to `1u32` to see why the type is important

// Short-circuiting boolean logic
println!("true AND false is {}", true && false);
println!("true OR false is {}", true || false);
println!("NOT true is {}", !true);

// Bitwise operations
println!("0011 AND 0101 is {:04b}", 0b0011u32 & 0b0101);
println!("0011 OR 0101 is {:04b}", 0b0011u32 | 0b0101);
println!("0011 XOR 0101 is {:04b}", 0b0011u32 ^ 0b0101);
println!("1 << 5 is {}", 1u32 << 5);
println!("0x80 >> 2 is 0x{:x}", 0x80u32 >> 2);

// Use underscores to improve readability!
println!("One million is written as {}", 1_000_000u32);
#+END_SRC

#+RESULTS:
#+begin_example
1 + 2 = 3
1 - 2 = -1
true AND false is false
true OR false is true
NOT true is false
0011 AND 0101 is 0001
0011 OR 0101 is 0111
0011 XOR 0101 is 0110
1 << 5 is 32
0x80 >> 2 is 0x20
One million is written as 1000000
#+end_example

** Tuples
元组没什么可记的（=。=）

*Activity*
1. 利用元组实现二阶矩阵的 ~Dispaly~ /trait/
2. 为二阶矩阵实现一个转置函数

#+BEGIN_SRC rust
use std::fmt;

#[derive(Debug)]
struct Matrix(f32, f32, f32, f32);

impl fmt::Display for Matrix {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "( {}, {} )\n( {}, {} )", self.0, self.1, self.2, self.3)
    }
}

fn transpose(m: Matrix) -> Matrix {
    Matrix(m.0, m.2, m.1, m.3)
}

let matrix = Matrix(1.1, 1.2, 2.1, 2.2);
println!("Matrix:\n{}", matrix);
println!("Transpose:\n{}", transpose(matrix));
#+END_SRC

#+RESULTS:
: Matrix:
: ( 1.1, 1.2 )
: ( 2.1, 2.2 )
: Transpose:
: ( 1.1, 2.1 )
: ( 1.2, 2.2 )

** Arrays and Slices
切片是数组数据的一部分，大小并不确定，用来借用数组的一部分数据。

* Custom types
*Rust* 定义复合类型通过 ~struct~ 和 ~enum~ 实现，同时可以通过 ~const~ 和 ~static~ 定义常量。

** Structures
可以使用 ~struct~ 创建三种结构:
- 元组
- C 结构体
- 单元

*Activity*
1. 实现一个 ~rect_area~ 函数计算矩形的面积
2. 实现一个 ~square~ ，构造一个 ~Rectangle~ 类型的正方体

#+BEGIN_SRC rust
#[derive(Debug)]
struct Point {
    x: f32,
    y: f32,
}

#[derive(Debug)]
struct Rectangle {
    p1: Point,
    p2: Point,
}

impl Rectangle {
    fn area(&self) -> f32 {
        (self.p2.y - self.p1.y).abs() * (self.p2.x - self.p1.x).abs()
    }
}

fn rect_area(rect: Rectangle) -> f32 {
    rect.area()
}

fn square(p: &Point, area: f32) -> Rectangle {
    Rectangle {
        p1: Point { x: p.x, y: p.y },
        p2: Point {
            x: p.x + area.sqrt(),
            y: p.y + area.sqrt(),
        },
    }
}

let rect = Rectangle {
    p1: Point { x: 0.0, y: 0.0 },
    p2: Point { x: 10.0, y: 10.0 },
};

println!("Area of rectangle: {}", rect_area(rect));
println!(
    "Square rectangle: {:?}",
    square(&Point { x: 0.0, y: 0.0 }, 100.0)
);
#+END_SRC

#+RESULTS:
: Area of rectangle: 100
: Square rectangle: Rectangle { p1: Point { x: 0.0, y: 0.0 }, p2: Point { x: 10.0, y: 10.0 } }

** Enums
枚举也没什么值得注意的（> <）

*** use
使用 ~use~ 关键字代替手动作用域声明~

*** C-like
没啥~

*** Testcase: linked-list
用 *Rust* 实现链表并不容易，可以使用枚举和 ~Box~ 智能指针来实现一个简单的链表。

#+BEGIN_SRC rust
enum List {
    Cons(u32, Box<List>),
    Nil,
}

impl List {
    fn new() -> List {
        List::Nil
    }

    fn prepend(self, elem: u32) -> List {
        List::Cons(elem, Box::new(self))
    }

    fn len(&self) -> u32 {
        match *self {
            List::Cons(_, ref tail) => 1 + tail.len(),
            List::Nil => 0,
        }
    }

    fn stringify(&self) -> String {
        match *self {
            List::Cons(head, ref tail) => format!("{}, {}", head, tail.stringify()),
            List::Nil => format!("Nil"),
        }
    }
}

let mut list = List::new();
list = list.prepend(1);
list = list.prepend(2);
println!("The length of List: {}", list.len());
println!("{}", list.stringify());
#+END_SRC

#+RESULTS:
: The length of List: 2
: 2, 1, Nil

** constants
Rust 有两种常量：
- 不可变常量
- 拥有静态生命周期的变量

* Variable Bindings
~let 这小节 = 没啥好说的;~

** Mutability
~let mut 这小节 = "没啥好说的";~

~这小节 = "确实没啥好说的";~

** Scope and Shadowing
当前环境的作用域往往在最近的封闭块内。

shadowing 指的是变量多次绑定时最后一次会遮蔽掉前面的绑定，在我看来，对变量的操作 Rust 与其他现代语言的最大不同是他叫做为绑定而不是赋值，当然好像只是称呼的不同。（> <）

** Declare first
不会真有人在变量绑定前初始化吧，会 ~undefined behavior~ 。

* Types
*Rust* 的类型系统做了这些事：
- 原生类型的转换
- 指定字面量的类型
- 类型推断
- 别名

** Casting
接触过一丢丢 *C/C++* 的人应该都知道，在 *C/C++* 对类型不匹配的值与变量进行赋值时，会有隐式类型转换发生。与这不同的是 *Rust* 不提供原生类型的隐式类型转换，可以使用 *as* 显示的进行类型转换。

** Literals
~let 这小节: String = "有啥好看的呢”;~

** Inference
*Rust* 类型推断引擎会追踪变量上下文的使用情况，很聪明 :)

** Aliasing
~type burgess = usize~
~type brs = brugess~

* Conversion
*Rust* 使用 /trait/ 完成类型间的转换。

** ~From~ and ~Into~
A2B 代表这 B2A 应该是可以做到的，这就是 ~From~ 和 ~Into~ 的作用和联系。

一个简单的说明：

#+BEGIN_SRC rust
#[derive(Debug)]
struct Example {
    e: i32,
}

impl From<i32> for Example {
    fn from(e: i32) -> Self {
        Example { e: e }
    }
}

let brs = Example::from(1024);
println!("Convert `i32' to `Example': {:?}", brs);
let e = 1024;
let brs: Example = e.into();
println!("Acquire `Example' into `i32': {:?}", brs);
#+END_SRC

#+RESULTS:
: Convert `i32' to `Example': Example { e: 1024 }
: Acquire `Example' into `i32': Example { e: 1024 }

** ~TryFrom~ and ~TryInto~
~TryFrom~ 和 ~TryInto~ 用于易于出错的类型转换，返回类型为 ~Result~ 。

#+BEGIN_SRC rust
use std::convert::{TryFrom, TryInto};

#[derive(Debug, PartialEq)]
struct EvenNumber(i32);

impl TryFrom<i32> for EvenNumber {
    type Error = ();

    fn try_from(value: i32) -> Result<Self, Self::Error> {
        if value % 2 == 0 {
            Ok(EvenNumber(value))
        } else {
            Err(())
        }
    }
}


assert_eq!(EvenNumber::try_from(8), Ok(EvenNumber(8)));
assert_eq!(EvenNumber::try_from(5), Err(()));
let result: Result<EvenNumber, ()> = 8i32.try_into();
assert_eq!(result, Ok(EvenNumber(8)));
let result: Result<EvenNumber, ()> = 5i32.try_into();
assert_eq!(result, Err(()));
#+END_SRC

#+RESULTS:

** To and From Strings
任意类型转换为 ~String~ 只需要实现 ~ToString~ /trait/ ，但是不能这么做（hh），可以通过实现 ~Display~ /trait/ 来提供 ~ToString~ /trait/ 。

可以使用 ~parse~ 完成 ~String~ 到数字的转换，这个转换过程依赖 ~FromStr~ /trait/ 。

* Expressions
*Rust* 是由语句组组成的，最普遍的语句类型有两种：一种是绑定变量，另一种是表达式带上分号。呐，如果有 Lisp 使用经验的话，一定清楚表达式的定义吧。

*Tips*
代码块也是一种表达式。

* Flow of Control
:)

** if/else
没意思 :(

** loop
没意思 :(

*** Nesting and labels
之前好像一直没想过嵌套的死循环如何结束不同循环层，看到这里才发现以前没察觉过。可以通过标签标记不同的循环层，然后 ~break~ 时指定对应的标记。

#+BEGIN_SRC rust
'outer: loop {
    println!("Now at outer loop");
    'inner loop {
        break 'outer;
    }
}
#+END_SRC

*** Returning from loops
没意思 :(

** while
:(

** for and range
/for .. in/ 结构作为一个常用的循环利用迭代器，不断的以 1 步长迭代目标数据。之前我只用到了 ~iter~ ，实际上将集合转换为迭代器有多种方法：
- ~iter~ --- 借用
- ~into_iter~ --- 消耗
- ~iter_mut~ --- 可变借用

** match
:(
*** Destructing
structure -> field elements

**** tuples
利用 match 可以解构元组、点对。

#+BEGIN_SRC rust
let pair = (1, 0);

match pair {
    (0, y) => println!("First is `0` and `y` is `{:?}`", y),
    (x, 0) => println!("`x` is `{:?}` and last is `0`", x),
    _      => println!("It doesn't matter what they are"),
}
#+END_SRC

#+RESULTS:
: `x` is `1` and last is `0`

**** enums
本小节实现了 ~Copy~ /trait/ :)
#+BEGIN_SRC rust
enum Color {
    Red,
    Blue,
    Green,
    RGB(u32, u32, u32),
    HSV(u32, u32, u32),
    HSL(u32, u32, u32),
    CMY(u32, u32, u32),
    CMYK(u32, u32, u32, u32),
}

let color = Color::RGB(122, 17, 40);
println!("What color is it?");
match color {
    Color::Red   => println!("The color is Red!"),
    Color::Blue  => println!("The color is Blue!"),
    Color::Green => println!("The color is Green!"),
    Color::RGB(r, g, b) =>
        println!("Red: {}, green: {}, and blue: {}!", r, g, b),
    Color::HSV(h, s, v) =>
        println!("Hue: {}, saturation: {}, value: {}!", h, s, v),
    Color::HSL(h, s, l) =>
        println!("Hue: {}, saturation: {}, lightness: {}!", h, s, l),
    Color::CMY(c, m, y) =>
        println!("Cyan: {}, magenta: {}, yellow: {}!", c, m, y),
    Color::CMYK(c, m, y, k) =>
        println!("Cyan: {}, magenta: {}, yellow: {}, key (black): {}!",
                 c, m, y, k),
}
#+END_SRC

#+RESULTS:
: What color is it?
: Red: 122, green: 17, and blue: 40!

**** pointers/ref
对于指针，解构、解引用要区分。
- ~*~ => 解引用
- ~&~ 、 ~ref~ 、 ~ref mut~ =>

#+BEGIN_SRC rust
let reference = &4;
match reference {
    &val => println!("Got a value via destructuring: {:?}", val),
}
match *reference {
    val => println!("Got a value via dereferencing: {:?}", val),
}

let example = 5;
let mut mut_example = 6;
match example {
    ref r => println!("Got a reference to a value: {:?}", r),
}
match mut_example {
    ref mut m => {
            *m += 10;
            println!("We added 10. `mut_value`: {:?}", m);
    },
}
#+END_SRC

#+RESULTS:
: Got a value via destructuring: 4
: Got a value via dereferencing: 4
: Got a reference to a value: 5
: We added 10. `mut_value`: 16

**** structs
解构解构体很简单 :)

#+BEGIN_SRC rust
struct Foo { x: (u32, u32), y: u32 };
let foo = Foo { x: (1, 2), y: 3 };
let Foo { x: (a, b), y } = foo;
println!("a = {}, b = {},  y = {} ", a, b, y);
#+END_SRC

#+RESULTS:
: a = 1, b = 2,  y = 3

*** Guards
守卫主要用来做分支判断

#+BEGIN_SRC rust
let pair = (2, -2);

println!("Tell me about {:?}", pair);
match pair {
    (x, y) if x == y => println!("These are twins"),
    (x, y) if x + y == 0 => println!("Antimatter, kaboom!"),
    (x, _) if x % 2 == 1 => println!("The first one is odd"),
    _ => println!("No..."),
}
#+END_SRC

#+RESULTS:
: Tell me about (2, -2)
: Antimatter, kaboom!

*** Bindings
在 match 的分支中访问值，需要重新绑定才能继续使用。
#+BEGIN_SRC rust
fn age() -> u32 {
    15
}

match age() {
    0             => println!("I'm not born yet I guess"),
    n @ 1  ..= 12 => println!("I'm a child of age {:?}", n),
    n @ 13 ..= 19 => println!("I'm a teen of age {:?}", n),
    n             => println!("I'm an old person of age {:?}", n),
}
#+END_SRC

** if let
记得在 The Book 里，把 ~if let~ 称作简洁控制流，实际上我很少用到，可能是因为我并非懒得缩进的人。

** while let
同上 :)

* Functions
*Rust* 函数声明与调用顺序没有要求。

** Methods
:(

** Closures
闭包是个老生常谈的玩意儿，就是捕获下外部环境。

#+BEGIN_SRC rust
fn add_one(i: i32) -> i32 {
    i + 1
}
let add_one_closures = | i: i32 | -> i32 { i + 1 };
let i = 1;
println!("function: {}", add_one(i));
println!("use closures: {}", add_one_closures(i));
#+END_SRC

#+RESULTS:
: function: 2
: use closures: 2

*** Capturing
